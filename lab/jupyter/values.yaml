# DIRECTORIES
#############
# Linux host:
# Make sure the user with userId, userGroup below has write access. A
# directory will be created by Kubernetes if it does not exist (BUT with the
# user root, hence you will have permission issues e.g. when trying to create
# files within Jupyter)

# Windows host:
# No need to worry about permissions
# BUT: a path C:\GitHub\datalab' must be entered as '/mnt/c/GitHub/datalab'

# Sourcecode directory on your HOST machine
# Will by default be mounted as /home/jovyan/work
sourcecodeDirectory: ''
# Data directory on your HOST machine
# Will by default be mounted as /home/jovyan/data
dataDirectory: ''


# NAMING OF KUBERNETES RESOURCES
################################
# These two keys can have arbitrary values. Choose the same namespace
# for a specific project, but different jupyterReleaseName if you have
# several Jupyter notebooks running in parallel for a specific project

# lower case alphanumeric characters or '-', and must start and end with an
# alphanumeric character

# Kubernetes namespace = project name
namespace: 
# Helm release name for Jupyter 
jupyterReleaseName: 


# LINUX PERMISSIONS
###################
# Windows host: just leave the defaults
# The Linux user id ("uid") for the main Jupyter user "Jovyan" to use inside
# Jupyter. Best to set it to your host user id (get it on the host by typing
# "id").
# userId: 0 (root) is impossible due to Jupyter's startup script
userId: 1000
# The Linux main user group id ("gid") to use within the Jupyter container Set
# it to your own host Linux gid (command: id, entry for gid).
# If you start a controlboard, the userGroup 65534 (nogroup) will be forced,
# to ensure that the controlboard works as designed
userGroup: 1000


# CONTROLBOARD OR NORMAL JUPYTER NOTEBOOK?
##########################################
# Hook whether this is the "normal" Jupyter notebook without any special priviledges
# ("false") or our controlboard ("true")
# To run a Jupyter notebook as a controlboard with Kubernetes priviledges,
# either use 
#   helm upgrade --install ... jupyter --set controlboard=true
# or use a dedicated values.yaml to override this setting.
# When true, userGroup=65534 as well as securitycontext.fsGroup=65534 will be forced
controlboard: false


####################
# OPTIONAL CONFIGS #
####################
# No need to change anything below

# ================
# JUPYTER NOTEBOOK
# ================
# Optionally change any configs here
jupyter:
  # Enable sudo rights for the Jupyter user? (e.g. to install Linux packages; not recommended)
  # Will force the pod to be run initially with user root (uid 0) - this might
  # not be possible on a secured Kubernetes - but then the Jupyter container
  # will fall back to user jovyan and the user id you specified under userId
  # above
  sudo: false
  # Default values for AWK Data Science Lab
  image:
    name: awkgroupag/datascience-notebook
    # Version of the Jupyter image - you want to change that to use an older image
    tag: 1.0.1
  # If no Jupyer token is given, a random one is generated and saved in a Kubernetes secret (this is more secure than providing a string here)
  # Whatever token you enter here takes precedence; an existing secret is thus overwritten with the value here
  token:
  # Security context for the pod. Will be overriden if you enable sudo above and you will run the container as root
  # Issues with permissions? Try to change the ids here
  securityContext:
    # Will be set to 0 if sudo is enabled above
    # Set userId above - this setting here has no effect
    # runAsUser: <ineffective>
    # Linux User Group ID for the Jupyter user
    # Set userGroup above - this setting here has no effect
    # runAsGroup: <ineffective>
    # Additional group membership so the Jupyter user is still able to use pip and anaconda within the container. Don't change this
    supplementalGroups: [100]
    # fsGroup will be forced to 65534 if you run this Notebook as controlboard. 
    fsGroup:
    # You should NOT need to change anything here
    fsGroupChangePolicy:
    runAsNonRoot:
    seLinuxOptions:
    seccompProfile:
    sysctls:
    windowsOptions:
  containers:
    resources:
      # Tell Kubernetes how much CPU and RAM/Memory Jupyter may use for its calculations by default (requests) and at max (limits)
      # Ressource settings for controlboard
      # Will also be mountes as setting for JupyterHub
      controlboard:
        requests:
          memory: "50Mi"
          cpu: "0.1"
        limits:
          memory: "100Mi"
          cpu: "0.5"
      # Ressource settings if NOT controlboard, but normal Jupyter
      # Notebook
      nonControlboard:
        requests:
          memory: "1Gi"
          cpu: "1"
        limits:
          memory: "4Gi"
          cpu: "4"
    # Add any additional environment variables for the Jupyter container here
    # extraEnvVars:
    # - name: MY_NEW_ENVIRONMENT_VARIABLE
    #   value: "1234"
    # Change where the data and source code directories are mounted to within Jupyter
    volumeMounts:
      mountPath:
        sourcecode: /home/jovyan/work
        data: /home/jovyan/data
    # Extra commands to run for the pod
    command: []
  # Additional annotations to add to each pod
  podAnnotations: {}
  # Additional labels to add to each pod
  podLabels: {}


# String to fully override common.names.fullname template 
fullnameOverride: ""

# String to partially override common.names.fullname template (will maintain the release name)  
nameOverride: ""

# What do we do with container images?
imagePullPolicy: IfNotPresent

# Add labels to all the deployed resources
commonLabels: {}

# Add annotations to all the deployed resources
commonAnnotations: {}
